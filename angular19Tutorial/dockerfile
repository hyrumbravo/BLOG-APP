# Stage 1: Build Angular app
FROM node:22 AS build

# Set working directory
WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm install --legacy-peer-deps

# Copy source code and build
COPY . .
RUN npm run build --configuration=production

# Stage 2: Serve Angular with Nginx
FROM nginx:alpine

# Set environment for production
ENV NODE_ENV=production

# Copy Angular build output to Nginx's serving directory
COPY --from=build /app/dist/angular19-tutorial /usr/share/nginx/html

# Replace default Nginx config with custom config
COPY nginx.conf /etc/nginx/nginx.conf

# Ensure Nginx serves on port 80
EXPOSE 80

# Start Nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]













































# # Stage 1: Build Angular app
# FROM node:22 AS build

# # Set working directory
# WORKDIR /app

# # Install dependencies
# COPY package*.json ./
# RUN npm install --legacy-peer-deps

# # Copy source code and build
# COPY . .
# RUN npm run build --configuration=production

# # Stage 2: Serve Angular with Nginx
# FROM nginx:alpine

# # Set environment for production
# ENV NODE_ENV=production

# # Copy Angular build output to Nginx's serving directory
# COPY --from=build /app/dist/angular19-tutorial/browser /usr/share/nginx/html

# # Replace default Nginx config with custom config
# COPY nginx.conf /etc/nginx/nginx.conf

# # Ensure Nginx serves on port 80
# EXPOSE 80

# # Start Nginx in the foreground
# CMD ["nginx", "-g", "daemon off;"]



# # Use Node.js to build Angular
# FROM node:18 AS build

# # Set working directory
# WORKDIR /app

# # Copy package.json and install dependencies
# COPY package.json package-lock.json ./
# RUN npm install

# # Copy application files and build
# COPY . .
# RUN npm run build --prod

# # Use Nginx to serve Angular
# FROM nginx:alpine

# # Copy built Angular files
# COPY --from=build /app/dist/angular19-tutorial /usr/share/nginx/html

# # Expose port
# EXPOSE 80

# # Start Nginx
# CMD ["nginx", "-g", "daemon off;"]
